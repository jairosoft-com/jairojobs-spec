/* tslint:disable */
/* eslint-disable */
/**
 * Job Portal API
 * API for the JairoJobs.com job portal MVP.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@jairojobs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  JobDetail,
  SearchAndListJobsResponse200Json,
} from '../models/index';
import {
    JobDetailFromJSON,
    JobDetailToJSON,
    SearchAndListJobsResponse200JsonFromJSON,
    SearchAndListJobsResponse200JsonToJSON,
} from '../models/index';

export interface GetJobDetailsRequest {
    jobId: string;
}

export interface SearchAndListJobsRequest {
    q?: string;
    location?: string;
    page?: number;
    limit?: number;
}

/**
 * 
 */
export class JobsApi extends runtime.BaseAPI {

    /**
     * Retrieves the full details for a specific job posting.
     * Get Job Details
     */
    async getJobDetailsRaw(requestParameters: GetJobDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobDetail>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling getJobDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/jobs/{jobId}`;
        urlPath = urlPath.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobDetailFromJSON(jsonValue));
    }

    /**
     * Retrieves the full details for a specific job posting.
     * Get Job Details
     */
    async getJobDetails(requestParameters: GetJobDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobDetail> {
        const response = await this.getJobDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of job postings, with optional filters for search query and location.
     * Search and List Jobs
     */
    async searchAndListJobsRaw(requestParameters: SearchAndListJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchAndListJobsResponse200Json>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['location'] != null) {
            queryParameters['location'] = requestParameters['location'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/jobs`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchAndListJobsResponse200JsonFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of job postings, with optional filters for search query and location.
     * Search and List Jobs
     */
    async searchAndListJobs(requestParameters: SearchAndListJobsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchAndListJobsResponse200Json> {
        const response = await this.searchAndListJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
