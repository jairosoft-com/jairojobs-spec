/* tslint:disable */
/* eslint-disable */
/**
 * Job Portal API
 * API for the JairoJobs.com job portal MVP.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@jairojobs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Full details of a job listing.
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * Unique identifier for the job.
     * @type {string}
     * @memberof Job
     */
    'id'?: string;
    /**
     * The title of the job.
     * @type {string}
     * @memberof Job
     */
    'title'?: string;
    /**
     * The name of the company posting the job.
     * @type {string}
     * @memberof Job
     */
    'company'?: string;
    /**
     * Unique identifier for the company.
     * @type {string}
     * @memberof Job
     */
    'companyId'?: string;
    /**
     * URL to the company\'s logo.
     * @type {string}
     * @memberof Job
     */
    'companyLogo'?: string;
    /**
     * The location of the job.
     * @type {string}
     * @memberof Job
     */
    'location'?: string;
    /**
     * 
     * @type {JobJobType}
     * @memberof Job
     */
    'type'?: JobJobType;
    /**
     * 
     * @type {JobExperienceLevel}
     * @memberof Job
     */
    'experienceLevel'?: JobExperienceLevel;
    /**
     * 
     * @type {JobRemoteOption}
     * @memberof Job
     */
    'remoteOption'?: JobRemoteOption;
    /**
     * 
     * @type {JobSalary}
     * @memberof Job
     */
    'salary'?: JobSalary;
    /**
     * The full description of the job.
     * @type {string}
     * @memberof Job
     */
    'description'?: string;
    /**
     * List of requirements for the job.
     * @type {Array<string>}
     * @memberof Job
     */
    'requirements'?: Array<string>;
    /**
     * List of responsibilities for the job.
     * @type {Array<string>}
     * @memberof Job
     */
    'responsibilities'?: Array<string>;
    /**
     * List of benefits for the job.
     * @type {Array<string>}
     * @memberof Job
     */
    'benefits'?: Array<string>;
    /**
     * List of tags for the job.
     * @type {Array<string>}
     * @memberof Job
     */
    'tags'?: Array<string>;
    /**
     * The date the job was posted.
     * @type {string}
     * @memberof Job
     */
    'postedAt'?: string;
    /**
     * The deadline for applying for the job.
     * @type {string}
     * @memberof Job
     */
    'applicationDeadline'?: string;
    /**
     * The number of applicants for the job.
     * @type {number}
     * @memberof Job
     */
    'applicants'?: number;
    /**
     * Whether the job is featured or not.
     * @type {boolean}
     * @memberof Job
     */
    'featured'?: boolean;
    /**
     * Whether the job is active or not.
     * @type {boolean}
     * @memberof Job
     */
    'active'?: boolean;
}


/**
 * Detailed information about a job posting.
 * @export
 * @interface JobDetail
 */
export interface JobDetail {
    /**
     * Unique identifier for the job.
     * @type {string}
     * @memberof JobDetail
     */
    'id'?: string;
    /**
     * The title of the job.
     * @type {string}
     * @memberof JobDetail
     */
    'title'?: string;
    /**
     * The name of the company posting the job.
     * @type {string}
     * @memberof JobDetail
     */
    'company'?: string;
    /**
     * Unique identifier for the company.
     * @type {string}
     * @memberof JobDetail
     */
    'companyId'?: string;
    /**
     * URL to the company\'s logo.
     * @type {string}
     * @memberof JobDetail
     */
    'companyLogo'?: string;
    /**
     * The location of the job.
     * @type {string}
     * @memberof JobDetail
     */
    'location'?: string;
    /**
     * 
     * @type {JobJobType}
     * @memberof JobDetail
     */
    'type'?: JobJobType;
    /**
     * 
     * @type {JobExperienceLevel}
     * @memberof JobDetail
     */
    'experienceLevel'?: JobExperienceLevel;
    /**
     * 
     * @type {JobRemoteOption}
     * @memberof JobDetail
     */
    'remoteOption'?: JobRemoteOption;
    /**
     * 
     * @type {JobSalary}
     * @memberof JobDetail
     */
    'salary'?: JobSalary;
    /**
     * The full description of the job.
     * @type {string}
     * @memberof JobDetail
     */
    'description'?: string;
    /**
     * List of requirements for the job.
     * @type {Array<string>}
     * @memberof JobDetail
     */
    'requirements'?: Array<string>;
    /**
     * List of responsibilities for the job.
     * @type {Array<string>}
     * @memberof JobDetail
     */
    'responsibilities'?: Array<string>;
    /**
     * List of benefits for the job.
     * @type {Array<string>}
     * @memberof JobDetail
     */
    'benefits'?: Array<string>;
    /**
     * List of tags for the job.
     * @type {Array<string>}
     * @memberof JobDetail
     */
    'tags'?: Array<string>;
    /**
     * The date the job was posted.
     * @type {string}
     * @memberof JobDetail
     */
    'postedAt'?: string;
    /**
     * The deadline for applying for the job.
     * @type {string}
     * @memberof JobDetail
     */
    'applicationDeadline'?: string;
    /**
     * The number of applicants for the job.
     * @type {number}
     * @memberof JobDetail
     */
    'applicants'?: number;
    /**
     * Whether the job is featured or not.
     * @type {boolean}
     * @memberof JobDetail
     */
    'featured'?: boolean;
    /**
     * Whether the job is active or not.
     * @type {boolean}
     * @memberof JobDetail
     */
    'active'?: boolean;
}


/**
 * The required experience level.
 * @export
 * @enum {string}
 */

export const JobExperienceLevel = {
    Entry: 'entry',
    Mid: 'mid',
    Senior: 'senior'
} as const;

export type JobExperienceLevel = typeof JobExperienceLevel[keyof typeof JobExperienceLevel];


/**
 * The type of employment.
 * @export
 * @enum {string}
 */

export const JobJobType = {
    FullTime: 'full-time',
    PartTime: 'part-time',
    Contract: 'contract',
    Internship: 'internship'
} as const;

export type JobJobType = typeof JobJobType[keyof typeof JobJobType];


/**
 * The remote work option.
 * @export
 * @enum {string}
 */

export const JobRemoteOption = {
    OnSite: 'on-site',
    Hybrid: 'hybrid',
    Remote: 'remote'
} as const;

export type JobRemoteOption = typeof JobRemoteOption[keyof typeof JobRemoteOption];


/**
 * Salary information for a job.
 * @export
 * @interface JobSalary
 */
export interface JobSalary {
    /**
     * Minimum salary for the job.
     * @type {number}
     * @memberof JobSalary
     */
    'min'?: number;
    /**
     * Maximum salary for the job.
     * @type {number}
     * @memberof JobSalary
     */
    'max'?: number;
    /**
     * The currency of the salary.
     * @type {string}
     * @memberof JobSalary
     */
    'currency'?: string;
    /**
     * The period of the salary.
     * @type {string}
     * @memberof JobSalary
     */
    'period'?: string;
}
/**
 * A summary of a job listing.
 * @export
 * @interface JobSummary
 */
export interface JobSummary {
    /**
     * Unique identifier for the job.
     * @type {string}
     * @memberof JobSummary
     */
    'id'?: string;
    /**
     * The title of the job.
     * @type {string}
     * @memberof JobSummary
     */
    'title'?: string;
    /**
     * The name of the company posting the job.
     * @type {string}
     * @memberof JobSummary
     */
    'company'?: string;
    /**
     * The location of the job.
     * @type {string}
     * @memberof JobSummary
     */
    'location'?: string;
    /**
     * 
     * @type {JobSummaryJobType}
     * @memberof JobSummary
     */
    'type'?: JobSummaryJobType;
    /**
     * 
     * @type {JobSummaryRemoteOption}
     * @memberof JobSummary
     */
    'remoteOption'?: JobSummaryRemoteOption;
    /**
     * The date the job was posted.
     * @type {string}
     * @memberof JobSummary
     */
    'postedAt'?: string;
}


/**
 * The type of employment.
 * @export
 * @enum {string}
 */

export const JobSummaryJobType = {
    FullTime: 'full-time',
    PartTime: 'part-time',
    Contract: 'contract',
    Internship: 'internship'
} as const;

export type JobSummaryJobType = typeof JobSummaryJobType[keyof typeof JobSummaryJobType];


/**
 * The remote work option.
 * @export
 * @enum {string}
 */

export const JobSummaryRemoteOption = {
    OnSite: 'on-site',
    Hybrid: 'hybrid',
    Remote: 'remote'
} as const;

export type JobSummaryRemoteOption = typeof JobSummaryRemoteOption[keyof typeof JobSummaryRemoteOption];


/**
 * Error response schema.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * HTTP status code.
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * A human-readable error message.
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * Pagination information for a list of items.
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * Total number of items.
     * @type {number}
     * @memberof Pagination
     */
    'total'?: number;
    /**
     * Current page number.
     * @type {number}
     * @memberof Pagination
     */
    'page'?: number;
    /**
     * Items per page.
     * @type {number}
     * @memberof Pagination
     */
    'limit'?: number;
    /**
     * Total number of pages.
     * @type {number}
     * @memberof Pagination
     */
    'totalPages'?: number;
}
/**
 * Response schema for searching and listing jobs.
 * @export
 * @interface SearchAndListJobsResponse200Json
 */
export interface SearchAndListJobsResponse200Json {
    /**
     * A list of job summaries.
     * @type {Array<JobSummary>}
     * @memberof SearchAndListJobsResponse200Json
     */
    'jobs'?: Array<JobSummary>;
    /**
     * 
     * @type {Pagination}
     * @memberof SearchAndListJobsResponse200Json
     */
    'pagination'?: Pagination;
}

/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the full details for a specific job posting.
         * @summary Get Job Details
         * @param {string} jobId ID of the job to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobDetails: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getJobDetails', 'jobId', jobId)
            const localVarPath = `/v1/jobs/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a paginated list of job postings, with optional filters for search query and location.
         * @summary Search and List Jobs
         * @param {string} [q] A search query to filter jobs by title, company, or description.
         * @param {string} [location] A location to filter jobs by.
         * @param {number} [page] The page number to retrieve.
         * @param {number} [limit] The number of jobs to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAndListJobs: async (q?: string, location?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the full details for a specific job posting.
         * @summary Get Job Details
         * @param {string} jobId ID of the job to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobDetails(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobDetails(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.getJobDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a paginated list of job postings, with optional filters for search query and location.
         * @summary Search and List Jobs
         * @param {string} [q] A search query to filter jobs by title, company, or description.
         * @param {string} [location] A location to filter jobs by.
         * @param {number} [page] The page number to retrieve.
         * @param {number} [limit] The number of jobs to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAndListJobs(q?: string, location?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchAndListJobsResponse200Json>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAndListJobs(q, location, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.searchAndListJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * Retrieves the full details for a specific job posting.
         * @summary Get Job Details
         * @param {string} jobId ID of the job to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobDetails(jobId: string, options?: RawAxiosRequestConfig): AxiosPromise<JobDetail> {
            return localVarFp.getJobDetails(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a paginated list of job postings, with optional filters for search query and location.
         * @summary Search and List Jobs
         * @param {string} [q] A search query to filter jobs by title, company, or description.
         * @param {string} [location] A location to filter jobs by.
         * @param {number} [page] The page number to retrieve.
         * @param {number} [limit] The number of jobs to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAndListJobs(q?: string, location?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<SearchAndListJobsResponse200Json> {
            return localVarFp.searchAndListJobs(q, location, page, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * Retrieves the full details for a specific job posting.
     * @summary Get Job Details
     * @param {string} jobId ID of the job to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJobDetails(jobId: string, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).getJobDetails(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a paginated list of job postings, with optional filters for search query and location.
     * @summary Search and List Jobs
     * @param {string} [q] A search query to filter jobs by title, company, or description.
     * @param {string} [location] A location to filter jobs by.
     * @param {number} [page] The page number to retrieve.
     * @param {number} [limit] The number of jobs to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public searchAndListJobs(q?: string, location?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).searchAndListJobs(q, location, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



