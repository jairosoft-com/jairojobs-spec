/**
 * Artifical Intelligence APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import { ImageContent, imageContentSchema } from '../imageContent';
import { TextContent, textContentSchema } from '../textContent';
import {
  ToolResultContent,
  toolResultContentSchema,
} from '../toolResultContent';
import { ToolUseContent, toolUseContentSchema } from '../toolUseContent';

/** This is a container type for any-of types. */
export type ContentRequest2 =
  | TextContent
  | ImageContent
  | ToolUseContent
  | ToolResultContent;

export const contentRequest2Schema: Schema<ContentRequest2> = anyOf([
  textContentSchema,
  imageContentSchema,
  toolUseContentSchema,
  toolResultContentSchema,
]);

export namespace ContentRequest2 {
  /**
   * Validation method to narrow down union type to TextContent type case.
   *
   * This is TextContent case.
   */
  export function isTextContent(value: unknown): value is TextContent {
    const validationResult = validateAndMap(value, textContentSchema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to ImageContent type case.
   *
   * This is ImageContent case.
   */
  export function isImageContent(value: unknown): value is ImageContent {
    const validationResult = validateAndMap(value, imageContentSchema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to ToolUseContent type case.
   *
   * This is ToolUseContent case.
   */
  export function isToolUseContent(value: unknown): value is ToolUseContent {
    const validationResult = validateAndMap(value, toolUseContentSchema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to ToolResultContent type case.
   *
   * This is ToolResultContent case.
   */
  export function isToolResultContent(
    value: unknown
  ): value is ToolResultContent {
    const validationResult = validateAndMap(value, toolResultContentSchema);
    return validationResult.errors === false;
  }
}
