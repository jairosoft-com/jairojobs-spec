/**
 * Artifical Intelligence APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateMessageRequest,
  createMessageRequestSchema,
} from '../models/createMessageRequest';
import {
  CreateMessageResponse,
  createMessageResponseSchema,
} from '../models/createMessageResponse';
import { nullable, optional, string } from '../schema';
import { BaseController } from './baseController';
import { ErrorResponseError } from '../errors/errorResponseError';

export class MessagesController extends BaseController {
  /**
   * @param anthropicVersion  The version of the Anthropic API you want to use.
   * @param body
   * @param anthropicBeta     Optional header to specify the beta version(s) you want
   *                                                         to use. If passing multiple, use a comma separated list
   *                                                         without spaces, e.g., beta1,beta2.
   * @return Response from the API call
   */
  async createMessage(
    anthropicVersion: string,
    body: CreateMessageRequest,
    anthropicBeta?: string | null,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreateMessageResponse>> {
    const req = this.createRequest('POST', '/messages');
    const mapped = req.prepareArgs({
      anthropicVersion: [anthropicVersion, string()],
      body: [body, createMessageRequestSchema],
      anthropicBeta: [anthropicBeta, optional(nullable(string()))],
    });
    req.header('anthropic-version', mapped.anthropicVersion);
    req.header('Content-Type', 'application/json');
    req.header('anthropic-beta', mapped.anthropicBeta);
    req.json(mapped.body);
    req.throwOn(400, ErrorResponseError, 'Error response');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(createMessageResponseSchema, requestOptions);
  }
}
